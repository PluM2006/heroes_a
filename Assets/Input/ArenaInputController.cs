//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/ArenaInputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ArenaInputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ArenaInputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ArenaInputController"",
    ""maps"": [
        {
            ""name"": ""ArenaActions"",
            ""id"": ""5ff84409-1c8f-443a-8bd0-6a5c216780a4"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""11e73379-3957-4f1d-aa33-b847a1e376a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Touch"",
                    ""id"": ""362f179e-a58c-46a9-b64e-60863e53c79f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""5e22cfa1-30e9-4272-bb29-3f807290a776"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchpad"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""b2fd3b7f-c526-419e-a6f9-50447fd3a0c8"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchpad"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""id"": ""a80f82e2-9b6f-42ca-a2d4-cf7bdceb701f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""6fa2b965-3004-4be2-a6af-fd150e0cb02a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""51fa091f-e085-428a-afcf-c3bd9a99e6ef"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""ArenaEntity"",
            ""id"": ""dbfd91ff-4983-4421-86ee-d59f006b91a9"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""fa4c52d7-f12b-4a61-838e-b38124291c26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""ea2b11cf-1247-4ab8-8a3e-9f7131ecbdf3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold,Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7c2b2b94-a024-4174-bb73-d113e7b90e43"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""742c509c-f1fe-4800-b448-52fda50d950c"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchpad"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4aa842f3-3f1b-4523-a0d0-1d793f3c0d6a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75b1e657-d557-4bbe-8d26-248a3b085a2f"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchpad"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touchpad"",
            ""bindingGroup"": ""Touchpad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ArenaActions
        m_ArenaActions = asset.FindActionMap("ArenaActions", throwIfNotFound: true);
        m_ArenaActions_Click = m_ArenaActions.FindAction("Click", throwIfNotFound: true);
        // ArenaEntity
        m_ArenaEntity = asset.FindActionMap("ArenaEntity", throwIfNotFound: true);
        m_ArenaEntity_Position = m_ArenaEntity.FindAction("Position", throwIfNotFound: true);
        m_ArenaEntity_Click = m_ArenaEntity.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ArenaActions
    private readonly InputActionMap m_ArenaActions;
    private List<IArenaActionsActions> m_ArenaActionsActionsCallbackInterfaces = new List<IArenaActionsActions>();
    private readonly InputAction m_ArenaActions_Click;
    public struct ArenaActionsActions
    {
        private @ArenaInputController m_Wrapper;
        public ArenaActionsActions(@ArenaInputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_ArenaActions_Click;
        public InputActionMap Get() { return m_Wrapper.m_ArenaActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ArenaActionsActions set) { return set.Get(); }
        public void AddCallbacks(IArenaActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_ArenaActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ArenaActionsActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IArenaActionsActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IArenaActionsActions instance)
        {
            if (m_Wrapper.m_ArenaActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IArenaActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_ArenaActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ArenaActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ArenaActionsActions @ArenaActions => new ArenaActionsActions(this);

    // ArenaEntity
    private readonly InputActionMap m_ArenaEntity;
    private List<IArenaEntityActions> m_ArenaEntityActionsCallbackInterfaces = new List<IArenaEntityActions>();
    private readonly InputAction m_ArenaEntity_Position;
    private readonly InputAction m_ArenaEntity_Click;
    public struct ArenaEntityActions
    {
        private @ArenaInputController m_Wrapper;
        public ArenaEntityActions(@ArenaInputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_ArenaEntity_Position;
        public InputAction @Click => m_Wrapper.m_ArenaEntity_Click;
        public InputActionMap Get() { return m_Wrapper.m_ArenaEntity; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ArenaEntityActions set) { return set.Get(); }
        public void AddCallbacks(IArenaEntityActions instance)
        {
            if (instance == null || m_Wrapper.m_ArenaEntityActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ArenaEntityActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IArenaEntityActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IArenaEntityActions instance)
        {
            if (m_Wrapper.m_ArenaEntityActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IArenaEntityActions instance)
        {
            foreach (var item in m_Wrapper.m_ArenaEntityActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ArenaEntityActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ArenaEntityActions @ArenaEntity => new ArenaEntityActions(this);
    private int m_TouchpadSchemeIndex = -1;
    public InputControlScheme TouchpadScheme
    {
        get
        {
            if (m_TouchpadSchemeIndex == -1) m_TouchpadSchemeIndex = asset.FindControlSchemeIndex("Touchpad");
            return asset.controlSchemes[m_TouchpadSchemeIndex];
        }
    }
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    public interface IArenaActionsActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IArenaEntityActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
}
