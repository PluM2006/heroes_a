//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input/GlobalMapInputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GlobalMapInputController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GlobalMapInputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GlobalMapInputController"",
    ""maps"": [
        {
            ""name"": ""MapActions"",
            ""id"": ""a4c79f2b-e227-41f3-8ee6-e72095875532"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""be68d0ee-eca0-4780-9672-27dbec903f91"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""2f7de1a7-a954-4b65-92bd-81f166f4d7f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""762ec6ab-d5d8-4ddf-b2d1-a0b96f8b20e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold,Tap(pressPoint=0.2),Press(pressPoint=0.1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eea49a4b-e5c4-447f-bbf9-af4769268592"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0661d8f-1d1a-40f2-91cb-87e1a260115e"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchpad"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Touch"",
                    ""id"": ""db2b4203-21a9-45e3-ae61-f3e098274d07"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""b3711cd3-e79e-4e1d-ac97-784324814584"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchPad"",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""ad133f59-33e3-4a0a-bd98-0aae3938d261"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchPad"",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""id"": ""d2e1b12b-0e61-4771-a49e-14b6b23b1f3f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""9c5caae6-a6e6-4cf2-baef-9f09046f1d30"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""bf6864b0-2105-4779-b2f5-fe58c563c890"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Touch"",
                    ""id"": ""7f9b57e9-ce28-4395-a69c-081d8a5fba62"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""f6776558-b283-42c0-9736-540392054e0d"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchPad"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""72c79130-be3d-4aec-8a74-5c7d09e428c0"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchPad"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""id"": ""b6998c97-5511-455c-9b89-2eec578ff599"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""24320ce6-1a37-4871-bc30-6bf3a0f57456"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""00c2928b-103d-467c-bb60-41d315dbe86b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MoveZoom"",
            ""id"": ""aed05207-2afa-42c0-93f6-9cc036ac0d22"",
            ""actions"": [
                {
                    ""name"": ""ZoomTouch1"",
                    ""type"": ""Value"",
                    ""id"": ""04ab8341-64c7-4e91-b8ca-0cc481d55013"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomTouch2"",
                    ""type"": ""Value"",
                    ""id"": ""751559e3-8757-447c-befb-cf4c9002833b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""bb97ff72-039d-4ad5-9ee4-f1ecbed1ec84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseWheel"",
                    ""type"": ""Value"",
                    ""id"": ""cd338ef8-bfb0-4191-96b6-d5d3ab06b396"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b8b9f400-0066-4b34-a201-3d571723764e"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomTouch1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0dff7b23-e096-441e-a09d-5e5dbd9e86f6"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomTouch2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bad8f2d6-8903-422d-8c7c-1b4b91c80342"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TouchPad"",
                    ""action"": ""ZoomTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f550fd5e-52d4-4851-a1f5-493a1f10ed6b"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""MouseWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""TouchPad"",
            ""bindingGroup"": ""TouchPad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MapActions
        m_MapActions = asset.FindActionMap("MapActions", throwIfNotFound: true);
        m_MapActions_Position = m_MapActions.FindAction("Position", throwIfNotFound: true);
        m_MapActions_Drag = m_MapActions.FindAction("Drag", throwIfNotFound: true);
        m_MapActions_Click = m_MapActions.FindAction("Click", throwIfNotFound: true);
        // MoveZoom
        m_MoveZoom = asset.FindActionMap("MoveZoom", throwIfNotFound: true);
        m_MoveZoom_ZoomTouch1 = m_MoveZoom.FindAction("ZoomTouch1", throwIfNotFound: true);
        m_MoveZoom_ZoomTouch2 = m_MoveZoom.FindAction("ZoomTouch2", throwIfNotFound: true);
        m_MoveZoom_ZoomTouchContact = m_MoveZoom.FindAction("ZoomTouchContact", throwIfNotFound: true);
        m_MoveZoom_MouseWheel = m_MoveZoom.FindAction("MouseWheel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MapActions
    private readonly InputActionMap m_MapActions;
    private List<IMapActionsActions> m_MapActionsActionsCallbackInterfaces = new List<IMapActionsActions>();
    private readonly InputAction m_MapActions_Position;
    private readonly InputAction m_MapActions_Drag;
    private readonly InputAction m_MapActions_Click;
    public struct MapActionsActions
    {
        private @GlobalMapInputController m_Wrapper;
        public MapActionsActions(@GlobalMapInputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_MapActions_Position;
        public InputAction @Drag => m_Wrapper.m_MapActions_Drag;
        public InputAction @Click => m_Wrapper.m_MapActions_Click;
        public InputActionMap Get() { return m_Wrapper.m_MapActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActionsActions set) { return set.Get(); }
        public void AddCallbacks(IMapActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_MapActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapActionsActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Drag.started += instance.OnDrag;
            @Drag.performed += instance.OnDrag;
            @Drag.canceled += instance.OnDrag;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IMapActionsActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Drag.started -= instance.OnDrag;
            @Drag.performed -= instance.OnDrag;
            @Drag.canceled -= instance.OnDrag;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IMapActionsActions instance)
        {
            if (m_Wrapper.m_MapActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_MapActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapActionsActions @MapActions => new MapActionsActions(this);

    // MoveZoom
    private readonly InputActionMap m_MoveZoom;
    private List<IMoveZoomActions> m_MoveZoomActionsCallbackInterfaces = new List<IMoveZoomActions>();
    private readonly InputAction m_MoveZoom_ZoomTouch1;
    private readonly InputAction m_MoveZoom_ZoomTouch2;
    private readonly InputAction m_MoveZoom_ZoomTouchContact;
    private readonly InputAction m_MoveZoom_MouseWheel;
    public struct MoveZoomActions
    {
        private @GlobalMapInputController m_Wrapper;
        public MoveZoomActions(@GlobalMapInputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @ZoomTouch1 => m_Wrapper.m_MoveZoom_ZoomTouch1;
        public InputAction @ZoomTouch2 => m_Wrapper.m_MoveZoom_ZoomTouch2;
        public InputAction @ZoomTouchContact => m_Wrapper.m_MoveZoom_ZoomTouchContact;
        public InputAction @MouseWheel => m_Wrapper.m_MoveZoom_MouseWheel;
        public InputActionMap Get() { return m_Wrapper.m_MoveZoom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveZoomActions set) { return set.Get(); }
        public void AddCallbacks(IMoveZoomActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveZoomActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveZoomActionsCallbackInterfaces.Add(instance);
            @ZoomTouch1.started += instance.OnZoomTouch1;
            @ZoomTouch1.performed += instance.OnZoomTouch1;
            @ZoomTouch1.canceled += instance.OnZoomTouch1;
            @ZoomTouch2.started += instance.OnZoomTouch2;
            @ZoomTouch2.performed += instance.OnZoomTouch2;
            @ZoomTouch2.canceled += instance.OnZoomTouch2;
            @ZoomTouchContact.started += instance.OnZoomTouchContact;
            @ZoomTouchContact.performed += instance.OnZoomTouchContact;
            @ZoomTouchContact.canceled += instance.OnZoomTouchContact;
            @MouseWheel.started += instance.OnMouseWheel;
            @MouseWheel.performed += instance.OnMouseWheel;
            @MouseWheel.canceled += instance.OnMouseWheel;
        }

        private void UnregisterCallbacks(IMoveZoomActions instance)
        {
            @ZoomTouch1.started -= instance.OnZoomTouch1;
            @ZoomTouch1.performed -= instance.OnZoomTouch1;
            @ZoomTouch1.canceled -= instance.OnZoomTouch1;
            @ZoomTouch2.started -= instance.OnZoomTouch2;
            @ZoomTouch2.performed -= instance.OnZoomTouch2;
            @ZoomTouch2.canceled -= instance.OnZoomTouch2;
            @ZoomTouchContact.started -= instance.OnZoomTouchContact;
            @ZoomTouchContact.performed -= instance.OnZoomTouchContact;
            @ZoomTouchContact.canceled -= instance.OnZoomTouchContact;
            @MouseWheel.started -= instance.OnMouseWheel;
            @MouseWheel.performed -= instance.OnMouseWheel;
            @MouseWheel.canceled -= instance.OnMouseWheel;
        }

        public void RemoveCallbacks(IMoveZoomActions instance)
        {
            if (m_Wrapper.m_MoveZoomActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveZoomActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveZoomActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveZoomActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveZoomActions @MoveZoom => new MoveZoomActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_TouchPadSchemeIndex = -1;
    public InputControlScheme TouchPadScheme
    {
        get
        {
            if (m_TouchPadSchemeIndex == -1) m_TouchPadSchemeIndex = asset.FindControlSchemeIndex("TouchPad");
            return asset.controlSchemes[m_TouchPadSchemeIndex];
        }
    }
    public interface IMapActionsActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnDrag(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IMoveZoomActions
    {
        void OnZoomTouch1(InputAction.CallbackContext context);
        void OnZoomTouch2(InputAction.CallbackContext context);
        void OnZoomTouchContact(InputAction.CallbackContext context);
        void OnMouseWheel(InputAction.CallbackContext context);
    }
}
